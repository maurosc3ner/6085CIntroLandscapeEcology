[
["index.html", "5085c/6015c Introduction to Lanscape Ecology &amp; GIS Syllabus Contact information Introduction of the TAs Content Schedule References", " 5085c/6015c Introduction to Lanscape Ecology &amp; GIS Spring 2019 Syllabus Contact information Professor: Diego F. Cuadros Office: 401 C Braunstein Hall, Main Campus Email: diego.cuadros@uc.edu Introduction of the TAs Andres Hernandez-Camacho M.Sc. https://github.com/andher1802 Esteban Correa-Agudelo M.Sc. https://github.com/maurosc3ner Format of the Lab sessions: This is not a class on statistics !!!! Only a brief introduction about the use of the tool for a better understanding of the landscape ecology applications. Notebooks with theory, practices, code samples, etc. Videos with detailed explanation about the topics. Lab assignment weekly starting on week 2. Lab sessions tutorials and materials can be found on https://maurosc3ner.github.io/6085cintrolandscapeecology/. Content The goal of this section is to exemplify the role of R in analysis of spatial data in landscape ecology applications. At the beginning, we will review the fundamentals of the use of R within the RStudio interface, basic data structures and operations. Then, we will explore the capabilities of plotting information with R, and finally the use of the library leaflet integrated with RStudio for visualizing spatial data. This brief introduction will help us in understanding the second part of the course, when we will analyze landscape ecology problems and using advance scripts to compute and simulate interesting scenarios of landscape disturbances. Schedule Table .: Lab schedule for the course (changes can take place due to unexpected events) x Week 1 - No assignment Introduction to R programming language – Getting familiar with R Studio interface, types of data structures, basic operations. Week 2 - Lab assignment 2 Introduction to R programming language - Loops, functions and graphics in R. Week 3 – Lab assignment 3 Introduction to R programming language – Basic statistical operations in R. Proportion test and two sample test, linear regression, and logistic regression. Week 4 – Lab assignment 4 Use of R as GIS part I. Use of leaflet for mapping spatial data, use of base maps, basic geolocation in R, set map properties, drawing point and polygon data. Week 5 – Lab assignment 5 Use of R as GIS part II. Use of leaflet for mapping spatial data, use of base maps, basic geolocation in R, set map properties, drawing point and polygon data. Week 6 – Lab assignmentc 6 Introduction to landscape metrics. Chapter 4 in Gergel, S. E., &amp; Turner, M. G. (2002). Learning landscape ecology: A practical guide to concepts and techniques Week 7 – Lab assignment 7 Variograms and semivariograms. Chapter 5 in Gergel, S. E., &amp; Turner, M. G. (2002). Learning landscape ecology: A practical guide to concepts and techniques Week 8 – Lab assignment 8 Characterizing categorical landscape patterns. Chapter 6 in Gergel, S. E., &amp; Turner, M. G. (2002). Learning landscape ecology: A practical guide to concepts and techniques Week 11 – Lab assignment 9 Introduction to Markov Models. Chapter 8 in Gergel, S. E., &amp; Turner, M. G. (2002). Learning landscape ecology: A practical guide to concepts and techniques. Week 12 – Lab assignment 10 Disturbances and network applications in landscape ecology. Chapter 11 &amp; 12 in Gergel, S. E., &amp; Turner, M. G. (2002). Learning landscape ecology: A practical guide to concepts and techniques. References Landscape ecology in theory and practice: Pattern and process, second edition (M. Turner and Gardner 2015) Learning Landscape Ecology: A Practical Guide to Concepts and Techniques (Gergel and Turner 2001) Geocomputation with R (Robin Lovelace and Muenchow 2019) References "],
["week1.html", "Chapter 1 Introduction to Landscape Ecology 1.1 Requirements 1.2 Learning objetives 1.3 Lab Theory 1.4 Lab: Getting familiar with R 1.5 Lab: Code practice 1.6 Project 1. 1.7 Project 2. 1.8 Project 3. 1.9 Project 4.", " Chapter 1 Introduction to Landscape Ecology 1.1 Requirements Chapter 1 - Introduction to Landscape Ecology. (Gergel and Turner 2001) 1.2 Learning objetives Install R and R Studio in your computer Understand the basic datatypes and data structures in R Declare basic datatypes and data structures Do basic element-wise and vector-wise operations 1.3 Lab Theory 1.3.1 What is R? R is a multiplatform programming language (“It means that we ask the computer to do jobs.”) R works in Windows, MacOs, Linux. R is free. Easy to learn and very powerful. R can do many jobs: Used as a calculator. R can be used to create figures such as scatter plots, bar plots, pie plots, etc. R can be used to summarize data (numerically and graphically). R can be used to do a lot of specific analyses. 1.3.2 What is R Studio? RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution. Tools for plotting, history, debugging and workspace management. Open source. 1.3.3 Installation of R and R Studio In this course, we run R on Windows for demonstration purposes. The installation of R on Windows is easy: Download R (for Windows) at https://cran.r-project.org. Run the downloaded .exe file. Current version is 3.5.2 (upgraded multiple times every year). Installation of RStudio is also straightforward Download can be found https://www.rstudio.com/products/rstudio/download/#download Current version 1.1.463 (for windows). 1.4 Lab: Getting familiar with R Installation Calculation and variables Create and Work With Vectors Character and Boolean Vectors Vector Arithmetic 1.5 Lab: Code practice This section is intended to complement the concepts explained in videos. You will find all the commands used but also the expected results. Please type these codes in your RStudio Editor and start to execute (CTRL+ENTER) line by line. 1.5.1 Task 1: Basic variables: numberStudents &lt;- 41 # Declaration of an integer value myFirtsName &lt;- &quot;Abraham&quot; # Declaration of a character value myWeight &lt;- 160.5 # Declaration of a numeric value isUCStudent &lt;- TRUE # Declaration of a logical value height &lt;- c(152, 171.5, 165) # Declaration of a numeric vector mat &lt;- matrix( c(14, 16, 18, 15, 22, 11), nrow = 3, ncol = 2, byrow = TRUE ) # Declaration of a n-dimensional matrix rubikCube &lt;- array(c(&#39;green&#39;,&#39;yellow&#39;,&#39;red&#39;,&#39;blue&#39;, &#39;white&#39;,&#39;orange&#39;),dim = c(3,3,6)) #Declaration of a data frame friends &lt;- data.frame( names = c(&quot;Thomas&quot;,&quot;Andrew&quot;,&quot;Lindsay&quot;), gender = c(&quot;Male&quot;, &quot;Male&quot;,&quot;Female&quot;), height = c(152, 171.5, 165), weight = c(81,93, 78), Age = c(42,38,26) ) # See the content of your variables print(numberStudents) # Check the content of numberStudents ## [1] 41 print(myFirtsName) # Check the content of myFirstName ## [1] &quot;Abraham&quot; print(myWeight) # Check the content of myWeight ## [1] 160.5 isUCStudent # Additional way to see the content within ## [1] TRUE dim(mat) # Check the dimensions of the matrix ## [1] 3 2 print(mat) # Check the content of the mat matrix ## [,1] [,2] ## [1,] 14 16 ## [2,] 18 15 ## [3,] 22 11 dim(rubikCube) # Check the dimensions of the matrix ## [1] 3 3 6 print(rubikCube) # Check your rubik content ## , , 1 ## ## [,1] [,2] [,3] ## [1,] &quot;green&quot; &quot;blue&quot; &quot;green&quot; ## [2,] &quot;yellow&quot; &quot;white&quot; &quot;yellow&quot; ## [3,] &quot;red&quot; &quot;orange&quot; &quot;red&quot; ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] &quot;blue&quot; &quot;green&quot; &quot;blue&quot; ## [2,] &quot;white&quot; &quot;yellow&quot; &quot;white&quot; ## [3,] &quot;orange&quot; &quot;red&quot; &quot;orange&quot; ## ## , , 3 ## ## [,1] [,2] [,3] ## [1,] &quot;green&quot; &quot;blue&quot; &quot;green&quot; ## [2,] &quot;yellow&quot; &quot;white&quot; &quot;yellow&quot; ## [3,] &quot;red&quot; &quot;orange&quot; &quot;red&quot; ## ## , , 4 ## ## [,1] [,2] [,3] ## [1,] &quot;blue&quot; &quot;green&quot; &quot;blue&quot; ## [2,] &quot;white&quot; &quot;yellow&quot; &quot;white&quot; ## [3,] &quot;orange&quot; &quot;red&quot; &quot;orange&quot; ## ## , , 5 ## ## [,1] [,2] [,3] ## [1,] &quot;green&quot; &quot;blue&quot; &quot;green&quot; ## [2,] &quot;yellow&quot; &quot;white&quot; &quot;yellow&quot; ## [3,] &quot;red&quot; &quot;orange&quot; &quot;red&quot; ## ## , , 6 ## ## [,1] [,2] [,3] ## [1,] &quot;blue&quot; &quot;green&quot; &quot;blue&quot; ## [2,] &quot;white&quot; &quot;yellow&quot; &quot;white&quot; ## [3,] &quot;orange&quot; &quot;red&quot; &quot;orange&quot; print(friends) # Check list content ## names gender height weight Age ## 1 Thomas Male 152.0 81 42 ## 2 Andrew Male 171.5 93 38 ## 3 Lindsay Female 165.0 78 26 1.5.2 Task 2: Operations a &lt;- 1.5 # Declaration of a numeric value b &lt;- 4.0 # Declaration of another numeric value a + b # Summation ## [1] 5.5 b - a # Substraction ## [1] 2.5 b * a # Multiplication ## [1] 6 b / a # Division ## [1] 2.666667 b ** 2 # Exponent ## [1] 16 b %% 2 # Modulus operation ## [1] 0 # Declaration of a vector of numeric values vector_values &lt;- c(1, 4, 9, 12, 15, 23, 17, 13, 9) mean(vector_values) # Computing the average of the set of values. ## [1] 11.44444 sum(vector_values) # summation of the set of values. ## [1] 103 length(vector_values) # Computing the average of the set of values. ## [1] 9 vector_values + 3 # Add or substract a number to each value on the set of values. ## [1] 4 7 12 15 18 26 20 16 12 vector_values * 5 # Multiply a number to each value on the set of values. ## [1] 5 20 45 60 75 115 85 65 45 vector_values %% 2 # Apply a modulo operation over the set of values. ## [1] 1 0 1 0 1 1 1 1 1 vector_values[1] # Indexing vectors in R (find the ith element). ## [1] 1 vector_values[5] # Suppose that we want to find the fifth element. ## [1] 15 vector_values[-2] # Get the vector without the second element. ## [1] 1 9 12 15 23 17 13 9 vector_values[1:3] # Get the first three elements of the vector. ## [1] 1 4 9 vector_values[c(1,3,5)] # Get the elements 1st, 3rd and 5th of the vector. ## [1] 1 9 15 vector_values == 9 # Check if the vector values are equals to 9 ## [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE TRUE which(vector_values == 9) # where are this value ## [1] 3 9 sum(vector_values == 9) # How many 9&#39;s are in the vector ## [1] 2 1.5.3 Task 3. Creating vectors new_vector &lt;- 1:10 # Create a vector from 1 to 10 new_vector ## [1] 1 2 3 4 5 6 7 8 9 10 new_vector &lt;- rep(5, 10) # Create a vector of 10 5&#39;s (ten times five) new_vector ## [1] 5 5 5 5 5 5 5 5 5 5 new_vector &lt;- seq(1, 10, 2) # Create a vector from 1 to less equals to 10 but with step of 2 new_vector ## [1] 1 3 5 7 9 new_vector &lt;- seq(2, 10, 2) # Same as before but with even numbers new_vector ## [1] 2 4 6 8 10 1.5.4 Task 4. Operations between two or more vectors vector1 &lt;- seq(2,10,2) vector1 ## [1] 2 4 6 8 10 vector2 &lt;- seq(11,20,2) # Declare two vectors vector2 ## [1] 11 13 15 17 19 vector_result &lt;- c(vector1, vector2) # Create a vector with the combination of vector1 and vector2 vector_result ## [1] 2 4 6 8 10 11 13 15 17 19 vector1 + vector2 # Addition of two vectors ## [1] 13 17 21 25 29 vector1 - vector2 # Substraction of two vectors ## [1] -9 -9 -9 -9 -9 vector1 * vector2 # Multiplication of two vectors ## [1] 22 52 90 136 190 vector1 / vector2 # division of two vectors ## [1] 0.1818182 0.3076923 0.4000000 0.4705882 0.5263158 max(vector_result) # vector max ## [1] 19 min(vector_result) # vector min ## [1] 2 pmax(vector1, vector2) # element-wise max ## [1] 11 13 15 17 19 pmin(vector1, vector2) # element-wise min ## [1] 2 4 6 8 10 head(vector_result) # first 5 elements ## [1] 2 4 6 8 10 11 1.6 Project 1. Create a vector x with 100 elements, the first 50 are 1, 2, 3, … , 99 and the rest 50 elements are 2, 4, …, 100. Create a vector y with 100 elements, the first 50 element are all 100; the rest 50 elements are 1, 2, 3, …, 50. Calculate x+y and the element-wise max for x and y; the sum of elements in x and y; the maximum value of x. 1.7 Project 2. Create a variable x &lt;- c(2, 9, 3, 7, 4, 9, 6, 6, 6, 6) Compute the following: (x1 + x2, …, x10)/10. Find Log10(xi) for each i. Find (xi - 1.5)/2.6 for each i. Find the difference between the largest and smallest values of x. (This is the range. You can use max and min.) 1.8 Project 3. Suppose you keep track of one variable x at some soecific poiny in the time. The last 8 values were: 55311 35624 15908 36219 65499 67251 65745 34447 Enter this numbers in R Use commands diff on the data. What does it give? Find the maximum number of the variable, the average number and the minimum number between the sample times. 1.9 Project 4. Suppose one of your bills varies from month to month. Also suppose your year has the following monthly amounts: 50 23 42 39 47 30 31 21 12 15 55 58 Enter this data into R using a variable called bill. Find the amount you spent this year on your bills. What is the smallest amount you spent? What is the largest? How many bills was the amount greater than $40? What percentage of the total bills was this? "]
]
